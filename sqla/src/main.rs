use core::marker::PhantomData;
use sqla::col::ColumnMeta;
use sqla::prelude::*;

// struct Users {
//     id: i64,
//     name: String,
// }
//
// struct Posts {
//     id: i64,
//     user_id: i64,
//     title: String,
//     published: bool,
// }

// generated by deriving
#[derive(Clone, Copy)]
pub struct Users;

// Column tags
#[derive(Clone, Copy)]
pub struct UsersIdTag;
impl ColumnMeta for UsersIdTag {
    const NAME: &'static str = "id";
}
#[derive(Clone, Copy)]
pub struct UsersNameTag;
impl ColumnMeta for UsersNameTag {
    const NAME: &'static str = "name";
}

#[derive(Clone, Copy)]
pub struct UsersProxy {
    pub id: Col<Users, i64, NotNull, UsersIdTag>,
    pub name: Col<Users, String, NotNull, UsersNameTag>,
}

#[derive(Clone, Copy)]
pub struct UsersNullableProxy {
    pub id: Col<Users, i64, Nullable, UsersIdTag>,
    pub name: Col<Users, String, Nullable, UsersNameTag>,
}

impl TableMeta for Users {
    type Proxy = UsersProxy;
    type NullableProxy = UsersNullableProxy;
    const NAME: &'static str = "users";
    fn proxy() -> Self::Proxy {
        UsersProxy {
            id: Col { _p: PhantomData },
            name: Col { _p: PhantomData },
        }
    }
    fn nullable_proxy() -> Self::NullableProxy {
        UsersNullableProxy {
            id: Col { _p: PhantomData },
            name: Col { _p: PhantomData },
        }
    }
}

#[derive(Clone, Copy)]
pub struct Posts;

#[derive(Clone, Copy)]
pub struct PostsIdTag;
impl ColumnMeta for PostsIdTag {
    const NAME: &'static str = "id";
}
#[derive(Clone, Copy)]
pub struct PostsUserIdTag;
impl ColumnMeta for PostsUserIdTag {
    const NAME: &'static str = "user_id";
}
#[derive(Clone, Copy)]
pub struct PostsTitleTag;
impl ColumnMeta for PostsTitleTag {
    const NAME: &'static str = "title";
}
#[derive(Clone, Copy)]
pub struct PostsPublishedTag;
impl ColumnMeta for PostsPublishedTag {
    const NAME: &'static str = "published";
}

#[derive(Clone, Copy)]
pub struct PostsProxy {
    pub id: Col<Posts, i64, NotNull, PostsIdTag>,
    pub user_id: Col<Posts, i64, NotNull, PostsUserIdTag>,
    pub title: Col<Posts, String, NotNull, PostsTitleTag>,
    pub published: Col<Posts, bool, NotNull, PostsPublishedTag>,
}

#[derive(Clone, Copy)]
pub struct PostsNullableProxy {
    pub id: Col<Posts, i64, Nullable, PostsIdTag>,
    pub user_id: Col<Posts, i64, Nullable, PostsUserIdTag>,
    pub title: Col<Posts, String, Nullable, PostsTitleTag>,
    pub published: Col<Posts, bool, Nullable, PostsPublishedTag>,
}

impl TableMeta for Posts {
    type Proxy = PostsProxy;
    type NullableProxy = PostsNullableProxy;
    const NAME: &'static str = "posts";
    fn proxy() -> Self::Proxy {
        PostsProxy {
            id: Col { _p: PhantomData },
            user_id: Col { _p: PhantomData },
            title: Col { _p: PhantomData },
            published: Col { _p: PhantomData },
        }
    }
    fn nullable_proxy() -> Self::NullableProxy {
        PostsNullableProxy {
            id: Col { _p: PhantomData },
            user_id: Col { _p: PhantomData },
            title: Col { _p: PhantomData },
            published: Col { _p: PhantomData },
        }
    }
}

fn main() {
    let q = from::<Users>()
        .left_join(from::<Posts>(), |u, p| {
            u.id.eq(p.user_id) & p.published.eq(true)
        })
        .filter(|j| j.r.published.eq(true))
        .select(|j| (j.l.id, j.l.name, j.r.title));

    println!("{}", q.sql());
}
